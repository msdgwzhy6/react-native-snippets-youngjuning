'.source.js.jsx':
  'import teaset':
    'prefix': 'teaset'
    'body': """
      import { Theme } from 'teaset'
    """
  'Teaset Button Component':
    'prefix': 'Button'
    'body': """
      <Button
        style={[styles.$1]}
        type="primary"
        size="lg"
        title="按钮"
        onPress={() => { $2 }}
      />
    """
  'Teaset Input Component':
    'prefix': 'Input'
    'body': """
      <Input
        style={[styles.$1]}
        size="lg"
        placeholder="$3"
        value={this.state.${2:value}}
        onChangeText={text => this.setState({ value: text })}
      />
    """
  'Teaset Password Input Component':
    'prefix': 'password'
    'body': """
      <Input
        style={[styles.$1]}
        size="lg"
        secureTextEntry
        placeholder="$3"
        value={this.state.${2:value}}
        onChangeText={text => this.setState({ value: text })}
      />
    """
  'Teaset SearchInput Component':
    'prefix': 'SearchInput'
    'body': """
      <SearchInput
        style={[{ width: 200 }, styles.search]}
        placeholder="${1:Enter text}"
        ${2:editable={false}}
        ${disabled}
      />
    """
    'description': '<SearchInput /> 搜索输入框'
    'descriptionMoreURL': 'http://t.cn/RB9kGsb'
  'Teaset Custom SearchInput Component':
    'prefix': 'SearchInputCustom'
    'body': """
      <SearchInput
        style={{width: 200, height: 40, backgroundColor: '#fcf8e3', borderColor: '#8a6d3b'}}
        inputStyle={{color: '#8a6d3b', fontSize: 18}}
        iconSize={15}
        value={this.state.valueCustom}
        placeholder='Custom'
        placeholderTextColor='#aaa'
        onChangeText={text => this.setState({valueCustom: text})}
      />
    """
  # Label
  'Teaset Label Component':
    'prefix': 'Label'
    'body': """
      <Label
        style={{$1}}
        ${1:type="${2:title/detail/danger}}"
        size="${3:md/lg}"
        text= "${4:Label Text}"
        ${5:numberOfLines="${6:1}"}
      />
    """
    'description': '<Label /> 标签'
    'descriptionMoreURL': 'http://t.cn/RBoAwiv'
  # page
  'Teaset Projector Component':
    'prefix': 'Projector'
    'body': """
      // Projector 组件定义一个幻灯机组件, 这是一个自动保持状态的多页显示组件, 并且具有视图缓存功能的, 切换页面就像切换幻灯机胶片一样, 原页面的内容和状态不会消失, 再切换回这个页面时原样呈现而无需重新渲染。
      import React, { Component } from 'react'
      import {
        View,
        ScrollView,
        StyleSheet,
      } from 'react-native'
      import { Projector, Label, Input, Button, ListRow } from 'teaset'

      const styles = StyleSheet.create({
        container: {
          flex: 1,
        },
      })

      export default class ProjectorScreen extends Component {
        static navigationOptions = ({ navigation }) => ({
          title: navigation.getParam('title', 'Projector'),
        })
        constructor(props) {
          super(props)
          this.state = {
            index: 0,
          }
        }
        renderSlide(color) {
          return (
            <View style={{
       backgroundColor: color, padding: 30, flex: 1, alignItems: 'center', justifyContent: 'center',
      }}
            >
              <Label text="Enter something" />
              <View style={{ height: 12 }} />
              <View><Input style={{ backgroundColor: 'rgba(255, 255, 255, 0.3)', width: 200 }} /></View>
            </View>
          )
        }
        renderButton(i) {
          return (
            <Button
              title={i}
              type={this.state.index == i ? 'primary' : 'default'}
              onPress={() => this.setState({ index: i })}
            />
          )
        }
        render() {
          return (
            <ScrollView style={styles.container}>
              <Projector style={{ height: 238, marginBottom: 20 }} index={this.state.index}>
                {this.renderSlide('#dff0d8')}
                {this.renderSlide('#d9edf7')}
                {this.renderSlide('#fcf8e3')}
                {this.renderSlide('#f2dede')}
              </Projector>
              <ListRow
                title="Slide no"
                detail={
                  <View style={{
       flex: 1, flexDirection: 'row', justifyContent: 'space-around',
      }}
                  >
                    {this.renderButton(0)}
                    {this.renderButton(1)}
                    {this.renderButton(2)}
                    {this.renderButton(3)}
                  </View>
                }
                topSeparator="full"
                bottomSeparator="full"
              />
            </ScrollView>
          )
        }
      }
    """
    'description': '<Projector /> 幻灯机'
    'descriptionMoreURL': 'http://t.cn/RBCzEgx'
  # NavigationBar
  'Teaset NavigationBar Component':
    'prefix': 'NavigationBar'
    'body': """
      <NavigationBar
        style={styles.$1}
        type="${2:auto/ios/android}"
        title="${3:标题}"
        leftView={<NavigationBar.BackButton title={Theme.backButtonTitle} />}
        rightView={
          <View style={{ flexDirection: 'row' }}>
            <NavigationBar.IconButton icon={search} />
          </View>
        }
      />
    """
  'Teaset NavigationBar.BackButton':
    'prefix': 'NavigationBar.BackButton'
    'body': """
      <NavigationBar.BackButton title={Theme.backButtonTitle} />
    """
  # AlbumView
  'Teaset showAlbumView':
    'prefix': 'showAlbumView'
    'body': """
      showAlbumView(index) {
        const curImg = this.state.curImg
        curImg.measure((x, y, width, height, pageX, pageY) => {
          const overlayView = (
            <Overlay.PopView
              style={{}}
              containerStyle={{ flex: 1 }}
              overlayOpacity={1}
              type="custom"
              customBounds={{
                x: pageX,
                y: pageY,
                width,
                height,
              }}
              ref={(c) => { this.state.fullImageView = c }}
            >
              <AlbumView
                style={{ flex: 1 }}
                control
                images={this.state.images}
                thumbs={this.state.thumbs}
                defaultIndex={index}
                onPress={() => this.state.fullImageView && this.state.fullImageView.close()}
              />
            </Overlay.PopView>
          )
          Overlay.show(overlayView)
        })
      }
    """
  # Badge
  'Teaset Badge Component':
    'prefix': 'Badge'
    'body': """
      <Badge ${1:type="${2:square/dot}"} count={${3:66}} maxCount={${4:99}} />
    """
    'description': '<Badge /> 徽章'
    'descriptionMoreURL': 'http://t.cn/RBS9a7P'
  # Carousel
  'Teaset Carousel Component':
    'prefix': 'Carousel'
    'body': """
      <Carousel
        style={{ height: 238 }}
        control
      >
        <Image
          style={{ width: 375, height: 238 }}
          resizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c61c88ad.jpg' }}
        />
        <Image
          style={{ width: 375, height: 238 }}
          resizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c41b11e3.jpg' }}
        />
        <Image
          style={{ width: 375, height: 238 }}
          sresizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c2796d93.jpg' }}
        />
      </Carousel>
    """
    'description': '<Carousel /> 走马灯'
    'descriptionMoreURL': 'http://t.cn/RBS9j2X'
  # Custom
  'Teaset Custom Carousel Component':
    'prefix': 'CarouselCustom'
    'body': """
      <Carousel
        style={{ height: 238 }}
        control={
          <Carousel.Control
            style={{ alignItems: 'flex-end' }}
            dot={<Text style={{ backgroundColor: 'rgba(0, 0, 0, 0)', color: '#5bc0de', padding: 4 }}>□</Text>}
            activeDot={<Text style={{ backgroundColor: 'rgba(0, 0, 0, 0)', color: '#5bc0de', padding: 4 }}>■</Text>}
          />
        }
      >
        <Image
          style={{ width: 375, height: 238 }}
          resizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c61c88ad.jpg' }}
        />
        <Image
          style={{ width: 375, height: 238 }}
          resizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c41b11e3.jpg' }}
        />
        <Image
          style={{ width: 375, height: 238 }}
          resizeMode="cover"
          source={{ uri: 'https://i.loli.net/2018/06/14/5b224c2796d93.jpg' }}
        />
      </Carousel>
    """
    'description': '<Carousel /> 走马灯'
    'descriptionMoreURL': 'http://t.cn/RBS9j2X'
  # ListRow
  'Teaset ListRow Component':
    'prefix': 'ListRow'
    'body': """
      <ListRow
        title="${1:Title}"
        titlePlace="${2:left/top/none/}"
        detail="${3:detail}"
        icon={(<Icon name="${4:rocket}" size={${5:30}} color="${6:#000}" />)}
        topSeparator="${7:indent/full/none}"
        bottomSeparator="${7:indent/full/none}"
        onPress={(${8:indicator}) => { Alert.alert('Click') }}
      />
    """
    'description': '<ListRow /> 列表行'
    'descriptionMoreURL': 'http://t.cn/RB9OSBH'
  'Teaset ListRow.SwipeActionButton Prop':
    'prefix': 'ListRow.SwipeActionButton'
    'body': """
      <ListRow
        title="${1:Title}"
        titlePlace="${2:left/top/none/}"
        detail="${3:detail}"
        icon={(<Icon name="${4:rocket}" size={${5:30}} color="${6:#000}" />)}
        topSeparator="${7:indent/full/none}"
        bottomSeparator="${7:indent/full/none}"
        swipeActions={[
          <ListRow.SwipeActionButton
            title="Cancel"
            onPress={() => { Alert.alert('Cancel') }}
          />,
          <ListRow.SwipeActionButton
            title="Remove"
            type="danger"
            onPress={() => { Alert.alert('Remove') }}
          />,
        ]}
        onPress={(${8:indicator}) => { Alert.alert('Click') }}
      />
    """
    'description': '<ListRow.SwipeActionButton /> Props'
    'descriptionMoreURL': 'http://t.cn/RB9j0o3'
  # Select
  'Teaset Select Component':
    'prefix': ''
    'body': """
      <Select
        style={{ width: 200 }}
        value={this.state.value}
        items={this.${1:items}}
        placeholder="${2:Select item}"
        pickerTitle="${3:Select item}"
        onSelected={(item, index) => this.setState({ value: item })}
      />
    """
    'description': '<Select /> 选择框'
    'descriptionMoreURL': 'http://t.cn/RBCNCVg'
  'Teaset SelectPopover Component':
    'prefix': 'SelectPopover'
    'body': """
      <Select
        style={{ width: 200 }}
        value={this.state.value}
        placeholder="${2:Select item}"
        items={this.${1:items}}
        pickerType="popover"
        onSelected={(item, index) => this.setState({ value: item })}
      />
    """
    'description': '<Select /> 选择框'
    'descriptionMoreURL': 'http://t.cn/RBCNCVg'
  'Teaset SelectPull Component':
    'prefix': 'SelectPull'
    'body': """
      <Select
        style={{ width: 200 }}
        value={this.state.value}
        placeholder="${1:Select item}"
        items={this.${2:items}}
        pickerType="pull"
        pickerTitle="${3:Select item}"
        onSelected={(item, index) => this.setState({ value: item })}
      />
    """
    'description': '<Select /> 选择框'
    'descriptionMoreURL': 'http://t.cn/RBCNCVg'
  # Stepper
  'Teaset Stepper Component':
    'prefix': 'Stepper'
    'body': """
      <ListRow
        title="${1:Title}"
        titlePlace="left"
        detail={<Stepper
          defaultValue={0}
          min={0}
          max={10}
          onChange={value => Alert.alert(`${value}`)}
        />}
        topSeparator="full"
        bottomSeparator="full"
      />
    """
    'description': '<Stepper /> 步进器'
    'descriptionMoreURL': 'http://t.cn/RBCNWrV'
  'Teaset StepperStep Component':
    'prefix': 'StepperStep'
    'body': """
      <ListRow
        title="${1；Title}"
        titlePlace="left"
        detail={<Stepper
          defaultValue={0.8}
          step={0.005}
          valueFormat={v => `${(v * 100).toFixed(1)}%`}
          valueStyle={{ minWidth: 60 }}
          onChange={value => Alert.alert(`${value}`)}
        />}
        topSeparator="full"
        bottomSeparator="full"
      />
    """
    'description': '<Stepper /> 步进器'
    'descriptionMoreURL': 'http://t.cn/RBCNWrV'
  # TabView
  'Teaset TabView Component':
    'prefix': 'TabView'
    'body': """
      <TabView style={styles.container} type="${1:projector/carousel}">
        <TabView.Sheet
          title="${2:Page1}"
          icon={require('../../icons/home.png')}
          activeIcon={require('../../icons/home_active.png')}
        >
          <${2:Page1} />
        </TabView.Sheet>
        <TabView.Sheet
          title="${3:page2}"
          icon={require('../../icons/me.png')}
          activeIcon={require('../../icons/me_active.png')}
          badge={1}
        >
          <${3:page2} />
        </TabView.Sheet>
      </TabView>
    """
    'description': '<TabView /> 标签页'
    'descriptionMoreURL': 'http://t.cn/RBCN8RX'
  'Teaset Wheel Component':
    'prefix': 'Wheel'
    'body': """
      <View style={styles.container}>
        <Wheel
          style={{ height: 200, width: 80 }}
          itemStyle={{ textAlign: 'center' }}
          items={this.items}
          onChange={(index) => { Alert.alert(`${this.items[index]}`) }}
        />
      </View>
    """
    'description': '<Wheel /> 滚轮'
    'descriptionMoreURL': 'http://t.cn/RBCNsqp'
  ## API
  # ActionPopover
  'Teaset showActionPopover':
    'prefix': 'showActionPopover'
    'body': """
      showActionPopover(view) {
        view.measure((x, y, width, height, pageX, pageY) => {
          const items = [
            { title: 'Copy', onPress: () => Alert.alert('Copy') },
            { title: 'Remove', onPress: () => Alert.alert('Remove') },
            { title: 'Share', onPress: () => Alert.alert('Share') },
          ]
          ActionPopover.show({
            x: pageX, y: pageY, width, height,
          }, items,{
            direction: 'up',
            ${1:autoDirection},
          })
        })
      }
    """
  # ActionSheet API
  'Teaset showActionSheet':
    'prefix': 'showActionSheet'
    'body': """
      showActionSheet() {
        const items = [
          { title: 'Say hello', onPress: () => Alert.alert('Hello') },
          { title: 'Do nothing' },
          { title: 'Disabled', disabled: true },
        ]
        const cancelItem = { title: 'Cancel' }
        ActionSheet.show(items, cancelItem)
      }
    """
  'Teaset Drawer':
    'prefix': 'Drawer'
    'body': """
      Drawer() {
        const view = (
          <View style={{ backgroundColor: Theme.defaultColor, height: 260, width: '100%' }}>
            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
              <Icon
                name="close"
                size={30}
                color={Theme.primaryColor}
                style={{ position: 'absolute', right: 8, top: 8 }}
                onPress={() => { this.closeDrawer() }}
              />
              <Label type="danger" size="xl" text="Drawer" />
            </View>
          </View>
        )
        this.state.drawer = Drawer.open(view, 'bottom')
      }
      closeDrawer() {
        this.state.drawer.close()
      }
    """
  'Teaset showMenu':
    'prefix': 'showMenu'
    'body': """
      showMenu(view, direction, align) {
        view.measure((x, y, width, height, pageX, pageY) => {
          const items = [
            {
              title: 'Search',
              icon: (<Icon name="rocket" size={20} color="#fff" />),
              onPress: () => Alert.alert('Search'),
            },
            {
              title: 'Edit',
              icon: (<Icon name="rocket" size={20} color="#fff" />),
              onPress: () => Alert.alert('Edit'),
            },
            {
              title: 'Remove',
              icon: (<Icon name="rocket" size={20} color="#fff" />),
              onPress: () => Alert.alert('Remove'),
            },
          ]
          Menu.show({
            x: pageX, y: pageY, width, height,
          }, items, {
            direction,
            align,
            showArrow: true,
          })
        })
      }
    """
    'description': 'Menu{} 菜单'
    'descriptionMoreURL': 'http://t.cn/RB9Yhze'
  # Teaset Toast API
  'Teaset Toast.message':
    'prefix': 'Toast.message'
    'body': """
      Toast.message('${1:Toast message}')
    """
  'Teaset Toast.success':
    'prefix': 'Toast.success'
    'body': """
      Toast.success('${1:Toast success}')
    """
  'Teaset Toast.fail':
    'prefix': 'Toast.fail'
    'body': """
      Toast.fail('${1:Toast fail}')
    """
  'Teaset Toast.smile':
    'prefix': 'Toast.smile'
    'body': """
      Toast.smile('${1:Toast smile}')
    """
  'Teaset Toast.sad':
    'prefix': 'Toast.sad'
    'body': """
      Toast.sad('${1:Toast sad}')
    """
  'Teaset Toast.info':
    'prefix': 'Toast.info'
    'body': """
      Toast.info('${1:Toast info}')
    """
  'Teaset Toast.stop':
    'prefix': 'Toast.stop'
    'body': """
      Toast.stop('${1:Toast stop}')
    """
  'Teaset Toast.showLoading':
    'prefix': 'Toast.showLoading'
    'body': """
      const loading = Toast.show({
        text: '$1',
        icon: <ActivityIndicator size="large" color={Theme.toastIconTintColor} />,
      })
    """
  'Teaset Toast.hideLoading':
    'prefix': 'Toast.hideLoading'
    'body': """
      Toast.hide(loading)
    """
  # PopoverPicker
  'Teaset showPopoverPicker':
    'prefix': 'showPopoverPicker'
    'body': """
      showPopoverPicker(view) {
        view.measure((x, y, width, height, pageX, pageY) => {
          PopoverPicker.show(
            {
              x: pageX, y: pageY, width, height,
            },
            this.items,
            this.state.selectedIndex,
            (item, index) => this.setState({ selectedIndex: index, selectedItem: item }),
          )
        })
      }
    """
    'description': 'PopoverPicker{} 气泡选择器'
    'descriptionMoreURL': 'http://t.cn/RBCzN8u'
  # PullPicker
  'Teaset showPullPicker':
    'prefix': 'showPullPicker'
    'body': """
      showPullPicker() {
        PullPicker.show(
          '${1:Select item}',
          this.items,
          this.state.selectedIndex,
          (item, index) => this.setState({
            selectedIndex: index,
            selectedItem: `当前选中：${item}`,
          }),
        )
      }
    """
  # Theme
  'Teaset Theme.statusBarHeight':
    'prefix': 'Theme.statusBarHeight'
    'body': """
      Theme.statusBarHeight
    """
  'Teaset Theme.navBarContentHeight':
    'prefix': 'Theme.navBarContentHeight'
    'body': """
      Theme.navBarContentHeight
    """
  'Teaset Theme.toastIconTintColor':
    'prefix': 'Theme.toastIconTintColor'
    'body': """
      Theme.toastIconTintColor
    """
  'Teaset Theme.backButtonTitle':
    'prefix': 'Theme.backButtonTitle'
    'body': """
      Theme.backButtonTitle
    """
  'Teaset Theme.primaryColor':
    'prefix': 'Theme.primaryColor'
    'body': """
      Theme.primaryColor
    """
  'Teaset Theme.dangerColor':
    'prefix': 'Theme.dangerColor'
    'body': """
      Theme.dangerColor
    """
  'Teaset Theme 修改默认配色方案':
    'prefix': 'Theme.themes'
    'body': """
      Theme.set(Theme.themes.${1:default/black/violet})
    """
  'Teaset Theme 修改部分默认值':
    'prefix': 'Theme.set'
    'body': """
      Theme.set({
        primaryColor: '#f55e5d',
        backButtonTitle: '返回',
      })
    """
